---created by hema

drop table Courses
--CREATING COURSES TABLE
create table Courses(CID INT primary key,CNAME varchar(10) not null,shifts varchar(20) check(shifts in('Morning','Evening')),Fees smallmoney not null) 

--INSERTING THE RECORDS INTO COURSES TABLE
insert into Courses values(1,'java','Morning',18000)
insert into Courses values(2,'Sql','Morning',18000.5790)
insert into Courses values(3,'.Net','Evening',20000)
insert into Courses values(4,'webTech','Evening',15000)
insert into Courses values(5,'html','Morning',1000)

--GETTING THE INSERTED RECORDS 
select * from Courses

drop table Students

--CREATING THE STUDENTS TABLE 
create table Students(SID INT primary key,SNAME varchar(10) not null,ORIGIN char(1) check(ORIGIN IN('L','F')),TYPE char(1) check(TYPE IN('N','F')))

--INSERTING THE RECORDS INTO STUDENTS TABLE
insert into Students values(1,'Hema','L','N')
insert into Students values(2,'Ramya','F','F')
insert into Students values(3,'Dhanusri','F','F')
insert into Students values(4,'Nitya','F','F')
insert into Students values(5,'Navya','L','F')
insert into Students values(6,'prasanna','F','N')

select * from Students

drop table Admissions

--CREATING THE ADMISSIONS TABLE 
create table Admissions(SID INT foreign key References Students(SID),CID INT foreign key References Courses(CID),DOJ datetime check(DOJ>='2020/01/01' AND DOJ<='2020/01/20'),GRADE char(1) check(Grade in('A','B','C')))

--INSERTING THE RECORDS INTO ADMISSIONS TABLE
insert into Admissions values(1,1,'2020/01/10','A')
insert into Admissions values(2,2,'2020/01/15','B')
insert into Admissions values(3,2,'2020/01/10','A')
insert into Admissions values(4,3,'2020/01/12','A')
insert into Admissions values(5,2,'2020/01/10','C')

select * from Admissions


--1)List the No.of students based on course wise.
select cid,count(sid) as students from Admissions group by cid

--List the student details which student origin Is foreign and no.of values exceeds 10?
select * from Students where origin like 'F' and (select count(SID) from Students where ORIGIN like 'F') > 4

--2)List the Student,Course,Admissions details which student taken some course ?
select Students.*,Courses.*,Admissions.* from Students,Courses,Admissions where Students.SID=Admissions.SID and Courses.CID=Admissions.CID

--3)List the all Student name which students grade is ‘A’ and “B’?
select Sname from Students,Admissions where (Students.SID=Admissions.SID) and (GRADE in('A','B'))

--4)List the Course details which course does not have any students?
select Courses.* from Courses,Students,Admissions where Courses.CID!=Admissions.CID and Students.SID!=Admissions.SID
except
select Courses.* from Courses,Students,Admissions where Courses.CID=Admissions.CID and Students.SID=Admissions.SID
--(or)
select * from Courses where cid not in(select cid from Admissions where sid in(select sid from Students))

--5)List the Fees details based on Student id which is more than 4000?
select Students.SID,Courses.Fees from Students,Courses,Admissions where Students.SID=Admissions.SID
and Courses.CID=Admissions.CID and Courses.Fees>4000

--6)Insert,Update,Delete records into students table using Procedure?
drop proc insertstutable
create proc insertstutable(@op int,@sid int,@sname varchar(20),@origin char(1),@type char(1))
as
begin
if(@op=1)
insert into Students values(@sid,@sname,@origin,@type)
else if(@op=2)
update Students set TYPE=@type where sid=@sid
else if(@op=3)
delete from Students where sid=@sid
else
print 'not valid input'
end
		exec insertstutable 3,8,'GHHJ','Y','N'
       exec insertstutable 1,7,'bindu','F','F'
	   select * from Students

--inserting record into student table using procedure
create proc insertstutable(@sid int,@sname varchar(20),@origin char(1),@type char(1))
as
begin
insert into Students values(@sid,@sname,@origin)
end
       exec insertstutable 7,'bindu','F','F'
drop proc updatestutable
--updating record into student table using procedure
create proc updatestutable(@sid int,@type char(1))
as
begin
declare @c int
select @c=count(*) from Students where sid=@sid
if(@c=1)
begin
update Students set TYPE='F' where sid=@sid
end
else
print 'entered sid does not exists'
end
		exec updatestutable 7,'F'
--creating procedure to delete record from student table
create proc deletestutable(@sid int)
as
begin
declare @z int
select @z=count(*) from Students where sid=@sid
if(@z=1)
delete from Students where sid=@sid
else
print 'entered sid does not exists'
end
      declare @id int
	  set @id=10
	  exec deletestutable @id

--7)List which course is taken maximum number of students?
select CNAME from courses  where cid=(select cid from Admissions where sid=
(select max(students) from(select max(sid) as students from Admissions group by cid having count(sid)>0) abc))
(or)
select CNAME from courses  where cid=(select cid from Admissions where sid=
(select max(sid) from Admissions where cid in(select cid as students from Admissions group by cid having count(sid)>0)))
(or)
select CNAME from Courses where CID= 
(select cid from Admissions where sid=
(select max(SID) from Admissions where sid
in(select CID from Admissions group by CID)))

--8)Create trigger for admissions table if the admission is taken on ‘Sunday’
create trigger addmtable
on Admissions
for insert
as
begin
	if datename(dw,getdate())='sunday'
	begin
	rollback
	raiserror('invalid data sun',1,1)
	end
end

--9)Make function to get weekday for given Student id?
create function weekdaystu(@sid int)
returns varchar(10)
as
begin
declare @doj varchar(10)
select @doj=Datename(dw,DOJ) from Admissions where sid=@sid
return @doj
end
		select(dbo.weekdaystu(sid)) from Students

--10)List which courses are common for 2 or more students?
select * from courses where cid=(select cid from Admissions group by cid having count(sid)>=2)

--11)To define synonym for Students Master?
create synonym sysforstudent for Students

--12)To define composite index on Doj,Grade?
create nonclustered index i1 on Admissions(Doj,Grade)










