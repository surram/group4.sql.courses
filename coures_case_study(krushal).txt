--created by krushal


--CREATING COURSES TABLE
CREATE TABLE COURSES(CID INT PRIMARY KEY,CNAME VARCHAR(10) NOT NULL,SHIFTS VARCHAR(20) CHECK(SHIFTS IN('MORNING','EVENING')),
FEES SMALLMONEY NOT NULL)

--INSERTING RECORDS INTO THE COURSES TABLE
INSERT INTO COURSES VALUES(1,'SQL','MORNING',10000)
INSERT INTO COURSES VALUES(2,'JAVA','EVENING',18000)
INSERT INTO COURSES VALUES(3,'C','EVENING',8383.9398)
INSERT INTO COURSES VALUES(4,'CPP','MORNING',0)
INSERT INTO COURSES VALUES(5,'C#','MORNING',1000)
INSERT INTO COURSES VALUES(6,'PYTHON','EVENING',5000)

--GETTING THE INSERTED RECORDS 
SELECT * FROM COURSES



--CREATING THE STUDENTS TABLE 
CREATE TABLE STUDENTS(SID INT PRIMARY KEY,SNAME VARCHAR(10) NOT NULL,ORIGIN CHAR(1) CHECK (ORIGIN IN('L','F')),
TYPE CHAR(1) CHECK(TYPE IN('N','F')))

--INSERTING THE RECORDS INTO STUDENTS TABLE 
INSERT INTO STUDENTS VALUES(1,'LILLY','F','N')
INSERT INTO STUDENTS VALUES(2,'JAY','F','F')
INSERT INTO STUDENTS VALUES(3,'RADHI','L','F')
INSERT INTO STUDENTS VALUES(4,'SONAL','L','N')

--GETTING THE INSERTED RECORDS INTO THE STUDENTS TABLE
SELECT * FROM STUDENTS

--CREATING THE ADMISSIONS TABLE
CREATE TABLE ADMISSIONS(SID INT FOREIGN KEY REFERENCES STUDENTS(SID),CID INT FOREIGN KEY REFERENCES COURSES(CID),
DOJ DATETIME CHECK(DOJ>='2020/01/01' AND DOJ<='2020/01/20'),GRADE CHAR(1) CHECK(GRADE IN('A','B','C')))

--INSERTING THE RECORDS INTO ADMISSIONS TABLE
INSERT INTO ADMISSIONS VALUES(1,1,'2020/01/10','A')
INSERT INTO ADMISSIONS VALUES(2,3,'2020/01/02','B')
INSERT INTO ADMISSIONS VALUES(3,2,'2020/01/14','A')
INSERT INTO ADMISSIONS VALUES(1,4,'2020/01/09','C')
INSERT INTO ADMISSIONS VALUES(2,5,'2020/01/13','B')
INSERT INTO ADMISSIONS VALUES(3,5,'2020/01/05','A')
INSERT INTO ADMISSIONS VALUES(3,5,'2020/01/05','A')



SELECT * FROM COURSES
SELECT * FROM STUDENTS
SELECT * FROM ADMISSIONS



--1)List the No.of students based on course wise.

SELECT CID,COUNT(SID) FROM ADMISSIONS GROUP BY CID

--List the student details which student origin Is foreign and no.of values exceeds 10?

select * from Students where 
origin in(select ORIGIN from Students where origin ='f' group by origin having count(*)>1)



--2)List the Student,Course,Admissions details which student taken some course ?
SELECT * FROM STUDENTS
SELECT * FROM ADMISSIONS
SELECT ADMISSIONS.*, COURSES.*,STUDENTS.* FROM COURSES,ADMISSIONS,STUDENTS 
WHERE ADMISSIONS.CID=COURSES.CID AND ADMISSIONS.SID=STUDENTS.SID

--3)List the all Student name which students grade is ‘A’ and “B’?

SELECT SNAME FROM STUDENTS WHERE SID IN(SELECT SID FROM ADMISSIONS WHERE GRADE IN('A','B'))

--4)List the Course details which course does not have any students?

SELECT * FROM COURSES C1 WHERE CID NOT IN(SELECT CID FROM ADMISSIONS where ADMISSIONS.cid =c1.CID)

--or--
SELECT * FROM COURSES LEFT JOIN ADMISSIONS ON COURSES.CID=ADMISSIONS.CID
EXCEPT
SELECT * FROM COURSES RIGHT JOIN ADMISSIONS ON COURSES.CID=ADMISSIONS.CID
--OR--
SELECT * FROM COURSES LEFT JOIN ADMISSIONS ON COURSES.CID=ADMISSIONS.CID
EXCEPT
SELECT * FROM COURSES INNER JOIN ADMISSIONS ON COURSES.CID=ADMISSIONS.CID

--5)List the Fees details based on Student id which is more than 4000?

SELECT * FROM COURSES
SELECT * FROM ADMISSIONS

SELECT ADMISSIONS.SID ,COURSES.FEES FROM ADMISSIONS INNER JOIN COURSES ON ADMISSIONS.CID=COURSES.CID AND COURSES.FEES >4000

--6)Insert,Update,Delete records into students table using Procedure?

GO
CREATE PROCEDURE STUDENTS_PROCEDURE(@CHOICE int,@SID INT,@SNAME VARCHAR(20),@ORIGIN CHAR(1),@TYPE CHAR(1))
AS
BEGIN
 
if(@CHOICE=1)
	insert into STUDENTS values(@SID,@SNAME,@ORIGIN,@TYPE)

if(@CHOICE=2)
	update STUDENTS set SNAME=@SNAME,ORIGIN=@ORIGIN,TYPE=@TYPE where SID=@SID
if(@CHOICE=3)
    delete STUDENTS where SID=@sid
if(@CHOICE not in(1,2,3))
   print 'choose 1 for insertion,2 for updation,3 for deletion'
end

SELECT * FROM STUDENTS
exec STUDENTS_PROCEDURE 1,5,'krushal','f','n'
exec STUDENTS_PROCEDURE 2,5,'krushall','l','f'
exec STUDENTS_PROCEDURE 3,5,'krushal','l','f'


--7)List which course is taken maximum number of students?

SELECT * FROM COURSES WHERE CID=(SELECT C.CID FROM ADMISSIONS A,COURSES C WHERE A.CID=C.CID 
GROUP BY C.CID HAVING COUNT(A.SID)=
(SELECT MAX(COUNT_SID)FROM (SELECT COUNT(SID) COUNT_SID FROM ADMISSIONS GROUP BY CID) ADMISSIONS))




--8)Create trigger for admissions table if the admission is taken on ‘Sunday’
go
CREATE TRIGGER TR1
ON ADMISSIONS
FOR INSERT 
AS
BEGIN
IF(DATEname(DW,getdate())='sunday')
ROLLBACK
RAISERROR('CANNOT INSERT RECORDS ON SUNDAY',1,1)
END


--9)Make function to get weekday for given Student id?

create FUNCTION GETWEEKDAY(@SID INT)
RETURNS VARCHAR(20)
BEGIN
DECLARE @DAY VARCHAR(20)
SELECT @DAY=DATENAME(DW,DOJ) FROM ADMISSIONS WHERE SID=@SID
RETURN @DAY
END

SELECT dbo.GETWEEKDAY(1)


--10)List which courses are common for 2 or more students?

select * from courses where cid in (select distinct a1.cid from ADMISSIONS a1, ADMISSIONS a2 where a1.CID=a2.CID and a1.SID!=a2.SID)

--or--

select * from courses where cid =(select cid from ADMISSIONS group by cid having count(sid)>2)

--11)To define synonym for Students Master?

create synonym s1 for students

--12)To define composite index on Doj,Grade?

CREATE NONCLUSTERED INDEX I1 ON ADMISSIONS(DOJ,GRADE)








