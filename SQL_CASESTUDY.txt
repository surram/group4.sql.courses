CREATE TABLE COURSES(CID INT PRIMARY KEY,CNAME VARCHAR(10) NOT NULL,SHIFTS VARCHAR(20) CHECK(SHIFTS IN('MORNING','EVENING')),FEES SMALLMONEY NOT NULL)
INSERT INTO COURSES VALUES(1,'SQL','MORNING',10000)
INSERT INTO COURSES VALUES(2,'JAVA','EVENING',18000)
INSERT INTO COURSES VALUES(3,'C','EVENING',8383.9398)
INSERT INTO COURSES VALUES(4,'CPP','MORNING',0)
INSERT INTO COURSES VALUES(5,'C#','MORNING',1000)
INSERT INTO COURSES VALUES(6,'PYTHON','EVENING',5000)


SELECT * FROM COURSES

--ALTER TABLE COURSES DROP PK__COURSES__C1F8DC59878BE311
--ALTER TABLE COURSES ADD PRIMARY KEY(SHIFTS)

DROP TABLE STUDENTS
CREATE TABLE STUDENTS(SID INT PRIMARY KEY,SNAME VARCHAR(10) NOT NULL,ORIGIN CHAR(1) CHECK (ORIGIN IN('L','F')),TYPE CHAR(1) CHECK(TYPE IN('N','F')))
INSERT INTO STUDENTS VALUES(1,'LILLY','F','N')
INSERT INTO STUDENTS VALUES(2,'JAY','F','F')
INSERT INTO STUDENTS VALUES(3,'RADHI','L','F')
INSERT INTO STUDENTS VALUES(4,'SONAL','L','N')
SELECT * FROM STUDENTS

CREATE TABLE ADMISSIONS(SID INT FOREIGN KEY REFERENCES STUDENTS(SID),CID INT FOREIGN KEY REFERENCES COURSES(CID),DOJ DATETIME CHECK(DOJ>='2020/01/01' AND DOJ<='2020/01/20'),GRADE CHAR(1) CHECK(GRADE IN('A','B','C')))
INSERT INTO ADMISSIONS VALUES(1,1,'2020/01/10','A')
INSERT INTO ADMISSIONS VALUES(2,3,'2020/01/02','B')
INSERT INTO ADMISSIONS VALUES(3,2,'2020/01/14','A')
INSERT INTO ADMISSIONS VALUES(1,4,'2020/01/09','C')
INSERT INTO ADMISSIONS VALUES(2,5,'2020/01/13','B')
INSERT INTO ADMISSIONS VALUES(3,5,'2020/01/05','A')
INSERT INTO ADMISSIONS VALUES(3,5,'2020/01/05','A')



SELECT * FROM ADMISSIONS
--1)List the No.of students based on course wise.
--List the student details which student origin Is foreign and
--no.of values exceeds 10?
SELECT CID,COUNT(SID) AS NUMBEROFSTUDENTS 
FROM ADMISSIONS GROUP BY CID

--2)List the Student,Course,Admissions details which student
--taken some course ?
SELECT STUDENTS.SID,COURSES.CID,ADMISSIONS.DOJ 
FROM STUDENTS INNER JOIN ADMISSIONS ON STUDENTS.SID=ADMISSIONS.SID 
INNER JOIN COURSES ON COURSES.CID=ADMISSIONS.CID

--3)List the all Student name which students grade is ‘A’ and “B’?
SELECT SNAME FROM STUDENTS WHERE SID 
IN(SELECT SID FROM ADMISSIONS WHERE GRADE IN('A','B'))

--4)List the Course details which course does not have any
--students?
--SELECT COURSES.CID,COURSES.CNAME FROM COURSES,ADMISSIONS
-- WHERE COURSES.CID!=ADMISSIONS.CID

SELECT * FROM COURSES WHERE NOT EXISTS
(SELECT 1 FROM ADMISSIONS WHERE ADMISSIONS.CID=COURSES.CID)



--5)List the Fees details based on Student id which is more than
--4000?
SELECT STUDENTS.SID,COURSES.CID,COURSES.CNAME, COURSES.FEES FROM COURSES INNER JOIN ADMISSIONS ON
 COURSES.CID=ADMISSIONS.CID 
INNER JOIN STUDENTS ON STUDENTS.SID=ADMISSIONS.SID WHERE FEES>4000 

--7)List which course is taken maximum number of students?
SELECT  MAX(COURSECOUNT)COUNTOFCOURSES
FROM(SELECT COUNT(COURSES.CID)COURSECOUNT 
FROM COURSES,STUDENTS,ADMISSIONS 
WHERE COURSES.CID=ADMISSIONS.CID AND STUDENTS.SID=ADMISSIONS.SID 
GROUP BY COURSES.CID,COURSES.CNAME)C;

--8)Create trigger for admissions table if the admission is taken 
--on ‘Sunday’?

CREATE TRIGGER TR1
ON ADMISSIONS
FOR INSERT,DELETE
AS 
BEGIN
  IF DATENAME(DW,GETDATE())='SUNDAY'
  BEGIN
  ROLLBACK
  RAISERROR('CANT INSERT OR DELETE OR UPDATE THE DATA ON SUNDAY',1,1)
  END
  END

INSERT INTO ADMISSIONS(DOJ,GRADE)VALUES('2020/01/05','A')

--9)Make function to get weekday for given Student id?
create function retdate(@sid int)
returns datetime
as
begin
declare @d datetime
select @d=doj from ADMISSIONS where sid=@sid
return @d
end
	select datename(dw,dbo.retdate(sid))from ADMISSIONS

--10)List which courses are common for 2 or more students?
SELECT COURSES.CID,COURSES.CNAME  FROM COURSES,ADMISSIONS 
 WHERE COURSES.CID=ADMISSIONS.CID 
GROUP BY COURSES.CID,COURSES.CNAME HAVING COUNT(COURSES.CID)>=2;

--11)To define synonym for Students Master?
CREATE SYNONYM S1 FOR STUDENTS
SELECT * FROM S1
