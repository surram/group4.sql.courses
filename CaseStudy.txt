---created by hema
drop table Courses
create table Courses(CID INT primary key,CNAME varchar(10) not null,shifts varchar(20) check(shifts in('Morning','Evening')),Fees smallmoney not null) 
insert into Courses values(1,'java','Morning',18000)
insert into Courses values(2,'Sql','Morning',18000.5790)
insert into Courses values(3,'.Net','Evening',20000)
insert into Courses values(4,'webTech','Evening',15000)
insert into Courses values(5,'html','Morning',1000)


select * from Courses

drop table Students
create table Students(SID INT primary key,SNAME varchar(10) not null,ORIGIN char(1) check(ORIGIN IN('L','F')),TYPE char(1) check(TYPE IN('N','F')))
insert into Students values(1,'Hema','L','N')
insert into Students values(2,'Ramya','F','F')
insert into Students values(3,'Dhanusri','F','F')
insert into Students values(4,'Nitya','F','F')
insert into Students values(5,'Navya','L','F')
insert into Students values(6,'prasanna','F','N')

select * from Students

drop table Admissions
create table Admissions(SID INT foreign key References Students(SID),CID INT foreign key References Courses(CID),DOJ datetime check(DOJ>='2020/01/01' AND DOJ<='2020/01/20'),GRADE char(1) check(Grade in('A','B','C')))
insert into Admissions values(1,1,'2020/01/10','A')
insert into Admissions values(2,2,'2020/01/15','B')
insert into Admissions values(3,2,'2020/01/10','A')
insert into Admissions values(4,3,'2020/01/12','A')
insert into Admissions values(5,2,'2020/01/10','C')

select * from Admissions

--1st
select cid,count(sid) as students from Admissions group by cid

select * from Students where origin like 'F' and (select count(SID) from Students where ORIGIN like 'F') > 4
--2nd
select Students.*,Courses.*,Admissions.* from Students,Courses,Admissions where Students.SID=Admissions.SID and Courses.CID=Admissions.CID

--3rd
select Sname from Students,Admissions where (Students.SID=Admissions.SID) and (GRADE in('A','B'))

--4th
select Courses.* from Courses,Students,Admissions where Courses.CID!=Admissions.CID and Students.SID!=Admissions.SID
except
select Courses.* from Courses,Students,Admissions where Courses.CID=Admissions.CID and Students.SID=Admissions.SID
--(or)
select * from Courses where cid not in(select cid from Admissions where sid in(select sid from Students))

--5th
select Students.SID,Courses.Fees from Students,Courses,Admissions where Students.SID=Admissions.SID and Courses.CID=Admissions.CID and Courses.Fees>4000

--6th
drop proc insertstutable
create proc insertstutable(@op int,@sid int,@sname varchar(20),@origin char(1),@type char(1))
as
begin
if(@op=1)
insert into Students values(@sid,@sname,@origin,@type)
else if(@op=2)
update Students set TYPE=@type where sid=@sid
else if(@op=3)
delete from Students where sid=@sid
else
print 'not valid data'
end
		exec insertstutable 3,8,'GHHJ','Y','N'
       exec insertstutable 1,7,'bindu','F','F'
	   select * from Students

--inserting record into student table using procedure
create proc insertstutable(@sid int,@sname varchar(20),@origin char(1),@type char(1))
as
begin
insert into Students values(@sid,@sname,@origin)
end
       exec insertstutable 7,'bindu','F','F'
drop proc updatestutable
--updating record into student table using procedure
create proc updatestutable(@sid int,@type char(1))
as
begin
declare @c int
select @c=count(*) from Students where sid=@sid
if(@c=1)
begin
update Students set TYPE='F' where sid=@sid
end
else
print 'entered sid does not exists'
end
		exec updatestutable 7,'F'
--creating procedure to delete record from student table
create proc deletestutable(@sid int)
as
begin
declare @z int
select @z=count(*) from Students where sid=@sid
if(@z=1)
delete from Students where sid=@sid
else
print 'entered sid does not exists'
end
      declare @id int
	  set @id=10
	  exec deletestutable @id

--7th

--select cname from Courses e where cid=(select max(cid) from Admissions group by cid)
--select cname from Courses where cid=(select cid from Students,Admissions where Students.SID=Admissions.SID group by cname having max(count(*)) 
select CNAME from courses  where cid=(select cid from Admissions where sid=
(select max(students) from(select max(sid) as students from Admissions group by cid having count(sid)>0) abc))

select CNAME from courses  where cid=(select cid from Admissions where sid=
(select max(sid) from Admissions where cid in(select cid as students from Admissions group by cid having count(sid)>0)))

select CNAME from Courses where CID= 
(select cid from Admissions where sid=
(select max(SID) from Admissions where sid
in(select CID from Admissions group by CID)))

--8th
create trigger addmtable
on Admissions
for insert
as
begin
	if datename(dw,getdate())='sunday'
	begin
	rollback
	raiserror('invalid data sun',1,1)
	end
end

--9th

create function weekdaystu(@sid int)
returns varchar(10)
as
begin
declare @doj varchar(10)
select @doj=Datename(dw,DOJ) from Admissions where sid=@sid
return @doj
end
		select(dbo.weekdaystu(sid)) from Students

--10th
select * from courses where cid=(select cid from Admissions group by cid having count(sid)>2)

--11th
create synonym sysforstudent for Students

--12th
create nonclustered index i1 on Admissions(Doj,Grade)










